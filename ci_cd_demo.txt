CI/CD demo

 1. Demo environment setup.
 2. Demo scenarios

 
Demo environment setup.
 
  i.e Scripts for setting up API Gateway(s).
 
  The demo will be designed to work on any API Gateway that will be hosted over docker/non-docker/on-premise/cloud. 
  
  We will also give setup scripts that one can use to create a Docker based environment for demos. 
 
  These will include 
  
   1. Docker compose files to create sample deployments.
   -> Dev will have a single node cluster.
   -> QA will be a 3 node cluster.
   -> Prod will be a 3 node cluster.
  
 
   2.Administration configuration
 
    We will also have some administration configurations and sample files for externalization. 
  
Demo scenarios
 
These demo scenarios will be explained in an tech community article.
1. Add a resource to the API and then follow the CI/CD process to run tests in QA environment and then promote to Prod.
2. Change a configuration and repeat the CI/CD process.

What will be the pipeline steps
1. Checkout from the GiT repo.
2. Build the repo. 
3. Import the API into the QA machine.
4. Run tests i.e Readiness,Functional, Performance ,Security
5. On success use the promotion apis to promote the APIs to the Prod machine.
 
Demo assets
 
These demo assets are just samples and recommendations and templates on how an Repo 
 should look like for API Gateway. This should be replaced with customer repo.
1. sample API repo with an Alias.
2. Jenkins files and azure pipelines.
3. Scripts that will help to import into an API Gateway from flat file.
4. Scripts that will help to export APIs from API Gateway and convert them to flat file.
5. Postman scripts for the import API and the promotion APIs.
5. Postman scripts for Runtime and performance tests in Postman.
6. API readiness, Security tests , other type of tests for APIs.


Preconfiguration script
 1. create
    - stage.
	- start with external configurations.
	- property file location.
	- docker registry location.

 2. External configuration.
    - property file location.
	
Build script 
 - Create a docker image.
 - Import.
 - Test - enable mocking.
 - Report.	

 

