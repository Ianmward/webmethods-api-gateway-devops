{
  "apiDefinition" : {
    "info" : {
      "description" : "This API enables site visitors to search for tours offered by NodeTours. Once a tour is found and the visitor wants to book the tour, the visitor must do the following:\n\n1. Sign up for an account, if the visitor has not already done so, using the functionality provided in the Sign-up API.\n\n2. Book the tour using the functionality provided in the Bookings API. \n\nThe Search API provides the following search options:\n\n- Show all available cruises.\n- Show cruises based on filter criteria.\n- Show a specific cruise based on its cruise ID.\n\nIf an error occurs, the API returns an HTTP status code and, where appropriate, a plain text message in the message body providing the reason for the error.",
      "version" : "1.0",
      "title" : "NodeTours Search API"
    },
    "serviceRegistryDisplayName" : "nodetours_1.0",
    "schemes" : [ ],
    "security" : [ ],
    "paths" : {
      "/cruises" : {
        "get" : {
          "summary" : "Search for cruises",
          "description" : "Searches for all cruises, or searches for a cruise that matches the specified criteria.\n\nThe GET method has two forms:\n- GET /cruises returns all cruises that are currently available.\n- GET /cruises?<criteria> returns all cruises that match the specified criteria.\nIn both cases, the returned result is a list of cruises returned in JSON format.\n\nThe following criteria can be specified to filter the list of returned cruises:\n- startDate - Start date of cruise. Cruises prior to this date will not be shown.\n- endDate - End date of cruise. Limits cruises returned to those completing on or before this date. For example: Seattle: 8:11 am Denver: 9:11 am Reston: 11:11 am UK: 4:11 pm\n- startPort - Port where the cruise begins.\n- numDays - Maximum cruise duration, in days.\nAll dates are in the format YYYYMMDD.",
          "operationId" : "Search for cruises",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "schema" : {
              "description" : "Cruise start date, in the format YYYYMMDD. Selects cruises that start on this date. Combined with endDate, this parameter filters cruises that take place within a specified date range.",
              "readOnly" : false,
              "type" : "string"
            },
            "in" : "query",
            "parameterSchema" : {
              "type" : "string"
            },
            "name" : "startDate",
            "description" : "Cruise start date, in the format YYYYMMDD. Selects cruises that start on this date. Combined with endDate, this parameter filters cruises that take place within a specified date range.",
            "type" : "string",
            "required" : false
          }, {
            "schema" : {
              "description" : "Cruise end date, in the format YYYYMMDD. Selects cruises that end on or before this date. Combined with startDate, this parameter filters cruises that take place within a specified date range.",
              "readOnly" : false,
              "type" : "string"
            },
            "in" : "query",
            "parameterSchema" : {
              "type" : "string"
            },
            "name" : "endDate",
            "description" : "Cruise end date, in the format YYYYMMDD. Selects cruises that end on or before this date. Combined with startDate, this parameter filters cruises that take place within a specified date range.",
            "type" : "string",
            "required" : false
          }, {
            "schema" : {
              "description" : "Port where the cruise begins.",
              "readOnly" : false,
              "type" : "string"
            },
            "in" : "query",
            "parameterSchema" : {
              "type" : "string"
            },
            "name" : "startPort",
            "description" : "Port where the cruise begins.",
            "type" : "string",
            "required" : false
          }, {
            "schema" : {
              "format" : "double",
              "description" : "Cruise length, in days.",
              "readOnly" : false,
              "type" : "number"
            },
            "in" : "query",
            "parameterSchema" : {
              "format" : "double",
              "type" : "number"
            },
            "name" : "numDays",
            "format" : "double",
            "description" : "Cruise length, in days.",
            "type" : "number",
            "required" : false
          } ],
          "responses" : {
            "200" : {
              "description" : "Search (with filter) was successful. GET method returned a list of all cruises that match the specified criteria, in JSON format.",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Query failed because the filter parameters are not valid. Check the resulting message for details.",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "204" : {
              "description" : "Search (with filter) was successful. GET method returned a empty response.",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "requestBody"
          }
        },
        "scopes" : [ ],
        "displayName" : "/cruises",
        "enabled" : true
      },
      "/" : {
        "get" : {
          "summary" : "GET header info",
          "description" : "Prints version number and host information",
          "produces" : [ "application/json" ],
          "responses" : {
            "200" : {
              "description" : "Server running. Version and host info printed",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : false,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "requestBody"
          }
        },
        "scopes" : [ ],
        "displayName" : "/",
        "enabled" : false
      },
      "/cruises/{cruiseID}" : {
        "get" : {
          "summary" : "GET a specific Cruise",
          "description" : "Returns a specific cruise based on the specified cruise ID.",
          "operationId" : "GET a specific Cruise",
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "schema" : {
              "description" : "Cruise identifier.  Given back as unique identifier when searching across all cruises.",
              "readOnly" : false,
              "type" : "string"
            },
            "in" : "path",
            "parameterSchema" : {
              "type" : "string"
            },
            "name" : "cruiseID",
            "description" : "Cruise identifier.  Given back as unique identifier when searching across all cruises.",
            "type" : "string",
            "required" : true
          } ],
          "responses" : {
            "200" : {
              "description" : "Specified cruise was retrieved successfully. GET method returned cruise details in JSON format.",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Cruise ID is not valid: <cruiseID>",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "204" : {
              "description" : "Search (with filter) was successful. GET method returned a empty response.",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "requestBody"
          }
        },
        "scopes" : [ ],
        "displayName" : "/cruises/{cruiseID}",
        "enabled" : true
      }
    },
    "securityDefinitions" : { },
    "definitions" : { },
    "parameters" : { },
    "baseUriParameters" : [ ],
    "externalDocs" : [ ],
    "servers" : [ {
      "url" : "http://nodetours:7777/",
      "variables" : { }
    } ],
    "components" : {
      "schemas" : { },
      "responses" : { },
      "parameters" : { },
      "examples" : { },
      "requestBodies" : { },
      "headers" : { },
      "links" : { },
      "callbacks" : { }
    },
    "type" : "rest"
  },
  "nativeEndpoint" : [ {
    "passSecurityHeaders" : true,
    "uri" : "http://nodetours:7777/",
    "connectionTimeoutDuration" : 0,
    "alias" : false
  } ],
  "apiName" : "nodetours",
  "apiVersion" : "1.0",
  "apiDescription" : "nodetours\n",
  "maturityState" : "Beta",
  "isActive" : false,
  "type" : "REST",
  "policies" : [ "65fa6beb-7471-41c7-bf5b-47211cb23813" ],
  "referencedFiles" : {
    "NodeTours-SearchAPI.json" : "{\n  \"swagger\" : \"2.0\",\n  \"info\" : {\n    \"description\" : \"This API enables site visitors to search for tours offered by NodeTours. Once a tour is found and the visitor wants to book the tour, the visitor must do the following:\\n\\n1. Sign up for an account, if the visitor has not already done so, using the functionality provided in the Sign-up API.\\n\\n2. Book the tour using the functionality provided in the Bookings API. \\n\\nThe Search API provides the following search options:\\n\\n- Show all available cruises.\\n- Show cruises based on filter criteria.\\n- Show a specific cruise based on its cruise ID.\\n\\nIf an error occurs, the API returns an HTTP status code and, where appropriate, a plain text message in the message body providing the reason for the error.\",\n    \"version\" : \"1.0\",\n    \"title\" : \"NodeTours Search API\"\n  },\n  \"host\" : \"nodetours:7777\",\n  \"basePath\" : \"/\",\n  \"schemes\" : [ \"http\" ],\n  \"paths\" : {\n    \"/\" : {\n      \"get\" : {\n        \"summary\": \"GET header info\",\n        \"description\": \"Prints version number and host information\",\n        \"produces\": [ \"application/json\" ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Server running. Version and host info printed\"\n          }\n        }\n      }\n    },\n    \"/cruises\" : {\n      \"get\" : {\n        \"summary\" : \"Search for cruises\",\n        \"description\" : \"Searches for all cruises, or searches for a cruise that matches the specified criteria.\\n\\nThe GET method has two forms:\\n- GET /cruises returns all cruises that are currently available.\\n- GET /cruises?<criteria> returns all cruises that match the specified criteria.\\nIn both cases, the returned result is a list of cruises returned in JSON format.\\n\\nThe following criteria can be specified to filter the list of returned cruises:\\n- startDate - Start date of cruise. Cruises prior to this date will not be shown.\\n- endDate - End date of cruise. Limits cruises returned to those completing on or before this date. For example: Seattle: 8:11 am Denver: 9:11 am Reston: 11:11 am UK: 4:11 pm\\n- startPort - Port where the cruise begins.\\n- numDays - Maximum cruise duration, in days.\\nAll dates are in the format YYYYMMDD.\",\n        \"operationId\" : \"Search for cruises\",\n        \"produces\" : [ \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"startDate\",\n          \"in\" : \"query\",\n          \"description\" : \"Cruise start date, in the format YYYYMMDD. Selects cruises that start on this date. Combined with endDate, this parameter filters cruises that take place within a specified date range.\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"endDate\",\n          \"in\" : \"query\",\n          \"description\" : \"Cruise end date, in the format YYYYMMDD. Selects cruises that end on or before this date. Combined with startDate, this parameter filters cruises that take place within a specified date range.\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"startPort\",\n          \"in\" : \"query\",\n          \"description\" : \"Port where the cruise begins.\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"numDays\",\n          \"in\" : \"query\",\n          \"description\" : \"Cruise length, in days.\",\n          \"required\" : false,\n          \"type\" : \"number\",\n          \"format\" : \"double\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"Search (with filter) was successful. GET method returned a list of all cruises that match the specified criteria, in JSON format.\"\n          },\n\t\t      \"204\" : {\n            \"description\" : \"Search (with filter) was successful. GET method returned a empty response.\"\n          },\n          \"400\" : {\n            \"description\" : \"Query failed because the filter parameters are not valid. Check the resulting message for details.\"\n          }\n        }\n      }\n    },\n    \"/cruises/{cruiseID}\" : {\n      \"get\" : {\n        \"summary\" : \"GET a specific Cruise\",\n        \"description\" : \"Returns a specific cruise based on the specified cruise ID.\",\n        \"operationId\" : \"GET a specific Cruise\",\n        \"produces\" : [ \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"cruiseID\",\n          \"in\" : \"path\",\n          \"description\" : \"Cruise identifier.  Given back as unique identifier when searching across all cruises.\",\n          \"required\" : true,\n          \"type\" : \"string\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"Specified cruise was retrieved successfully. GET method returned cruise details in JSON format.\"\n          },\n\t\t  \"204\" : {\n            \"description\" : \"Search (with filter) was successful. GET method returned a empty response.\"\n          },\n          \"400\" : {\n            \"description\" : \"Cruise ID is not valid: <cruiseID>\"\n          }\n        }\n      }\n    }\n  }\n}\n"
  },
  "scopes" : [ ],
  "publishedPortals" : [ ],
  "creationDate" : "2020-07-29 16:45:03 GMT",
  "lastModified" : "2020-07-29 16:46:46 GMT",
  "systemVersion" : 1,
  "id" : "1ff01896-0434-4552-9cf8-3ef5a74f2fa7"
}